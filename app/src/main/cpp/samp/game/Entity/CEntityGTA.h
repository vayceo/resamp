//
// Created by roman on 11/24/2024.
//

#pragma once


#include "Placeable.h"
#include "Link.h"
#include "game/Enums/eEntityStatus.h"
#include "game/Enums/eEntityType.h"
#include "game/Enums/eSurfaceType.h"
#include "game/Enums/eAreaCodes.h"
#include "game/Reference.h"
#include "Rect.h"
#include "game/Models/BaseModelInfo.h"
#include "game/Enums/eModelID.h"

struct CEntityGTA : public CPlaceable{
public:
    union {
        struct RwObject* m_pRwObject;
        struct RpClump*  m_pRwClump;
        struct RpAtomic* m_pRwAtomic;
    };

    union {
        struct {
            /* https://github.com/multitheftauto/mtasa-blue/blob/master/Client/game_sa/CEntitySA.h */
            bool m_bUsesCollision : 1;               // does entity use collision
            bool m_bCollisionProcessed : 1;          // has object been processed by a ProcessEntityCollision function
            bool m_bIsStatic : 1;                    // is entity static
            bool m_bHasContacted : 1;                // has entity processed some contact forces
            bool m_bIsStuck : 1;                     // is entity stuck
            bool m_bIsInSafePosition : 1;            // is entity in a collision free safe position
            bool m_bWasPostponed : 1;                // was entity control processing postponed
            bool m_bIsVisible : 1;                   // is the entity visible

            bool m_bIsBIGBuilding : 1;               // Set if this entity is a big building
            bool m_bRenderDamaged : 1;               // use damaged LOD models for objects with applicable damage
            bool m_bStreamingDontDelete : 1;         // Don't let the streaming remove this
            bool m_bRemoveFromWorld : 1;             // remove this entity next time it should be processed
            bool m_bHasHitWall : 1;                  // has collided with a building (changes subsequent collisions)
            bool m_bImBeingRendered : 1;             // don't delete me because I'm being rendered
            bool m_bDrawLast : 1;                    // draw object last
            bool m_bDistanceFade : 1;                // Fade entity because it is far away

            bool m_bDontCastShadowsOn : 1;           // Don't cast shadows on this object
            bool m_bOffscreen : 1;                   // offscreen flag. This can only be trusted when it is set to true
            bool m_bIsStaticWaitingForCollision : 1; // this is used by script created entities - they are static until the collision is loaded below them
            bool m_bDontStream : 1;                  // tell the streaming not to stream me
            bool m_bUnderwater : 1;                  // this object is underwater change drawing order
            bool m_bHasPreRenderEffects : 1;         // Object has a prerender effects attached to it
            bool m_bIsTempBuilding : 1;              // whether the building is temporary (i.e. can be created and deleted more than once)
            bool m_bDontUpdateHierarchy : 1;         // Don't update the animation hierarchy this frame

            bool m_bHasRoadsignText : 1;             // entity is roadsign and has some 2dEffect text stuff to be rendered
            bool m_bDisplayedSuperLowLOD : 1;
            bool m_bIsProcObject : 1;                // set object has been generated by procedural object generator
            bool m_bBackfaceCulled : 1;              // has backface culling on
            bool m_bLightObject : 1;                 // light object with directional lights
            bool m_bUnimportantStream : 1;           // set that this object is unimportant, if streaming is having problems
            bool m_bTunnel : 1;                      // Is this model part of a tunnel
            bool m_bTunnelTransition : 1;            // This model should be rendered from within and outside the tunnel
        };
        uint32_t m_nFlags;
    };
    uint32_t flags2;
    union {
        struct {
            uint16_t m_nRandomSeedUpperByte : 8;
            uint16_t m_nRandomSeedSecondByte : 8;
        };
        uint16_t m_nRandomSeed;
    };

    uint16_t            m_nModelIndex;
    CReference          *m_pReferences;
    CLink<CEntityGTA*>     *m_pStreamingLink;
    uint16_t            m_nScanCode;
    uint8_t             m_nIplIndex;
    eAreaCodes          m_nAreaCode;
    union {
        int32_t       m_nLodIndex; // -1 - without LOD model
        CEntityGTA* m_pLod;
    };
    uint8_t         m_nNumLodChildren; // numLodChildren;
    int8_t          m_nNumLodChildrenRendered; // numLodChildrenRendered;
    eEntityType     m_nType : 3;          // Mask: & 0x7  = 7
    eEntityStatus   m_nStatus : 5;        // Mask: & 0xF8 = 248 (Remember: In the original code unless this was left shifted the value it's compared to has to be left shifted by 3!)
    uint8_t         pad_0;


public:
    [[nodiscard]] bool IsPhysical() const { return m_nType > ENTITY_TYPE_BUILDING && m_nType < ENTITY_TYPE_DUMMY; }
    [[nodiscard]] bool IsNothing()  const { return m_nType == ENTITY_TYPE_NOTHING; }
    [[nodiscard]] bool IsVehicle()  const { return m_nType == ENTITY_TYPE_VEHICLE; }
    [[nodiscard]] bool IsPed()      const { return m_nType == ENTITY_TYPE_PED; }
    [[nodiscard]] bool IsObject()   const { return m_nType == ENTITY_TYPE_OBJECT; }
    [[nodiscard]] bool IsBuilding() const { return m_nType == ENTITY_TYPE_BUILDING; }
    [[nodiscard]] bool IsDummy()    const { return m_nType == ENTITY_TYPE_DUMMY; }

    CEntityGTA();
    ~CEntityGTA() override;

    virtual void Add();                                             // VTab: 2, similar to previous, but with entity bound rect
    virtual void Add(const CRect* rect);                            // VTab: 1
    virtual void Remove();                                          // VTab: 3
    virtual void SetIsStatic(bool isStatic);                        // VTab: 4
    virtual void SetModelIndex(uint32_t index);                       // VTab: 5
    virtual void SetModelIndexNoCreate(uint32_t index);               // VTab: 6

    [[nodiscard]] auto GetType() const noexcept { return (eEntityType)m_nType; }
    void SetType(eEntityType type) { m_nType = type; }

    [[nodiscard]] auto GetStatus() const noexcept { return m_nStatus; }
    void SetStatus(eEntityStatus status) { m_nStatus = status; }

    void SetInterior(int interiorId, bool needRefresh = false);

    float GetDistanceFromCamera();
    float GetDistanceFromLocalPlayerPed() const;
    float GetDistanceFromPoint(float X, float Y, float Z) const;

    void SetCollisionChecking(bool bCheck);

    void UpdateRpHAnim();

    void UpdateRwFrame();
    void UpdateRW();

    RwMatrix* GetModellingMatrix();

    void DeleteRwObject();

    auto GetModelId() const { return (eModelID)m_nModelIndex; }
    CBaseModelInfo* GetModelInfo() const;

    void RegisterReference(CEntityGTA** entity);

    // Register a reference to the entity that is stored in that given reference
    template<typename T>
    static void RegisterReference(T*& ref) requires std::is_base_of_v<CEntityGTA, T> {
        ref->RegisterReference(reinterpret_cast<CEntityGTA**>(&ref));
    }

    void PruneReferences();
    void ResolveReferences();

    template<typename T>
    static void CleanUpOldReference(T*& ref) requires std::is_base_of_v<CEntityGTA, T> {
        ref->CleanUpOldReference(reinterpret_cast<CEntityGTA**>(&ref));
    }

    template<typename T>
    static void ClearReference(T*& ref) requires std::is_base_of_v<CEntityGTA, T> {
        if (ref) {
            ref->CleanUpOldReference(reinterpret_cast<CEntityGTA**>(&ref));
            ref = nullptr;
        }
    }

    template<typename T, typename Y>
    requires std::is_base_of_v<CEntityGTA, T> && std::is_base_of_v<CEntityGTA, Y>
    static void ChangeEntityReference(T*& inOutRef, Y* entity) {
        ClearReference(inOutRef); // Clear old
        if (entity) { // Set new (if any)
            inOutRef = entity;
            inOutRef->RegisterReference(reinterpret_cast<CEntityGTA**>(&inOutRef));
        }
    }

    void CleanUpOldReference(CEntityGTA** entity); // See helper SafeCleanUpOldReference
};
static_assert(sizeof(CEntityGTA) == (VER_x32 ? 0x3C : 0x60));
